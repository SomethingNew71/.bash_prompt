###################################
# Color Declerations
###################################
LIGHTBLUE=$(tput setaf 12)
DARKBLUE=$(tput setaf 24)
DARKRED=$(tput setaf 160)
DARKESTRED=$(tput setaf 196)
NICEWHITE=$(tput setaf 230)
NICEYELLOW=$(tput setaf 226)
YELLOW=$(tput setaf 136)
NICEORANGE=$(tput setaf 130)

###################################
# New Git Tracking System
###################################
__powerline() {
    # Unicode symbols
    GIT_BRANCH_SYMBOL='⑂ '
    GIT_BRANCH_CHANGED_SYMBOL='+'
    GIT_NEED_PUSH_SYMBOL='⇡'
    GIT_NEED_PULL_SYMBOL='⇣'
    RESET="\[$(tput sgr0)\]"

    __git_info() {
      # git not found
      [ -x "$(which git)" ] || return
      # force git output in English to make our work easier
      local git_eng="env LANG=C git"
      # get current branch name or short SHA1 hash for detached head
      local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
      # git branch not found
      [ -n "$branch" ] || return
      local marks
      # branch is modified?
      [ -n "$($git_eng status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"
      # how many commits local branch is ahead/behind of remote?
      local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
      local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
      local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
      [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
      [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"
      # print the git branch segment without a trailing newline
      printf "$NICEWHITE$GIT_BRANCH_SYMBOL$DARKRED$branch$NICEYELLOW$marks"
    }

    ps1() {
      # Base PS1 prompt
      PS1="\[$DARKBLUE\]\u\[ \]\[$NICEWHITE\]in\[ \]\[$YELLOW\]\w "
      # Add Git Info and New Line and end to PS1 prompt
      PS1+="$(__git_info)\[$NICEWHITE\]\n$\[$RESET\]\[ \]"
    }
    PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
